---
import type { Tabs } from "@/types";
import Button from "@components/Button/Button.astro";
import { scrollVelocityTransform } from "@plugins/scrollVelocityTransform/serverUtils";

interface Props {
	tabs: Tabs;
}
export type TabsProps = Props;

const { tabs } = Astro.props;
const tabsEntries = Object.entries(tabs);
const dialogId = "tabs-dialog";
---

<header class="text-label color-white text-right">
	<nav>
		<Button
			class="z-1000 fixed mix-blend-difference top-0 right-0 max-w-max mt-4 mr-4 mb-8 -translate-y-50 motion-safe:transition-transform hover:text-accent-200 focus-visible:text-accent-200"
			visualType="outline"
			size="small"
			data-menu-toggle
			title="menu"
			aria-expanded="false"
			targetSelector={`#${dialogId}`}
			targetClassToggle="important:clip-circle-top-right-full"
			closeType="any-click"
			{...scrollVelocityTransform(2)}
		>
			<div class="i-mingcute-menu-line?mask"></div>
		</Button>
		<section
			id={dialogId}
			class="fixed inset-0 z-1000 cursor-pointer flex-center text-subtitle-2 text-center text-primary-950 bg-white bg-opacity-99 clip-circle-top-right motion-safe:transition-clip-path-600 transition-ease-in"
		>
			<ul class="flex-col-center gap-6 h-full">
				{
					tabsEntries.map(([_, { id, label }]) => (
						<li class="motion-safe:transition-transform">
							<a
								is="nav-tab"
								class="animated-underline animated-underline-right font-light"
								href={`#${id}`}
								data-tab-active-class="before:important:scale-x-100"
							>
								{label}
							</a>
						</li>
					))
				}
			</ul>
		</section>
	</nav>
</header>

<script>
	import { motionSafeMedia } from "@/constants";
	import "./TabElement";
	import { scroll } from "motion";
	const hiddenClass = "-translate-y-50";

	const toggleButton = document.querySelector<HTMLElement>("header button");
	if (toggleButton) {
		if (motionSafeMedia.matches) {
			scroll(({ y }) => {
				if (y.current < 100) toggleButton.classList.add(hiddenClass);
				else toggleButton.classList.remove(hiddenClass);
			});
		}
	}
</script>

<style lang="scss">
	// TODO: replace with unocss rule
	.animated-underline {
		@apply relative before:(pseudo-full top-auto w-full h-0.1em scale-x-0) hover:before:scale-x-100 focus-visible:before:scale-x-1 motion-safe:before:transition-transform;

		&::before {
			background-color: var(--underline-color, currentColor);
			transform-origin: var(--underline-origin, center bottom);
		}
	}
</style>
