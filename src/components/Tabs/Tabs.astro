---
import type { Tabs } from "@/types";
import Button from "@components/Button/Button.astro";

interface Props {
	tabs: Tabs;
}
export type TabsProps = Props;

const { tabs } = Astro.props;
const tabsEntries = Object.entries(tabs);
---

<header class="text-label color-white text-right">
	<nav>
		<toggled-menu class="block">
			<Button
				class="z-1000 fixed mix-blend-difference top-0 right-0 max-w-max mt-4 mr-4 mb-8 -translate-y-50 motion-safe:transition-transform-300 hover:text-accent-200 focus-visible:text-accent-200"
				visualType="outline"
				size="small"
				data-menu-toggle
				title="menu"
			>
				<div class="i-mingcute-menu-line?mask"></div>
			</Button>
			<div
				aria-expanded="false"
				class="z-1000 color-primary-950 fixed rounded-2 overflow-hidden top-20 right-0 p-4 glass-backdrop transform-origin-r shadow transform-gpu scale-0 -translate-y-20 md:-translate-y-60 md:top-60 motion-safe:transition-transform-300"
				data-expanded-class="important:transform-none"
			>
				<ul class="flex flex-col gap-8 md:gap-12">
					{
						tabsEntries.map(([_, { id, label }]) => (
							<li>
								<a
									is="nav-tab"
									class="capitalize animated-underline animated-underline-right font-light"
									href={`#${id}`}
								>
									{label}
								</a>
							</li>
						))
					}
				</ul>
			</div>
		</toggled-menu>
	</nav>
</header>

<style>
	.active {
		@apply before:scale-x-100;
	}
</style>

<script>
	import { motionSafeMedia } from "@/constants";
	import "./TabElement";
	import "@components/_CustomElements/Menu";
	import { scroll } from "motion";
	import { clamp } from "three/src/math/MathUtils.js";

	const toggleButton = document.querySelector<HTMLElement>("header button");
	if (toggleButton) {
		if (motionSafeMedia.matches) {
			scroll(({ y }) => {
				if (y.current < 100) toggleButton.classList.add("-translate-y-50");
				else toggleButton.classList.remove("-translate-y-50");

				const pageVelocity = clamp(y.velocity / window.innerHeight, -1, 1);
				const transform = `translate3d(0,${1 - pageVelocity * 5}px,0)`;
				toggleButton.style.transform = transform;
			});
		}
	}
</script>

<style lang="scss">
	// TODO: replace with unocss rule
	.animated-underline {
		@apply relative before:(pseudo-full top-auto w-full h-0.1em scale-x-0) hover:before:scale-x-100 focus-visible:before:scale-x-1 motion-safe:before:transition-transform;

		&::before {
			background-color: var(--underline-color, currentColor);
			transform-origin: var(--underline-origin, center bottom);
		}
	}
</style>
