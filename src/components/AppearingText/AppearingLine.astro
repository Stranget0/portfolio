---
import type { Polymorphic } from "astro/types";
import type { TextTag } from "./types";
import { playAudioTooltip } from "./serverUtils";
import AnimatedText from "@components/AnimatedText.astro";

type Props<T extends TextTag = "p"> = Polymorphic<{ as: T }> & {
	text: string;
	class?: string;
	group?: number;
	dontShowTooltip?: boolean;
	animatedOnView?: boolean;
	animatedInitially?: boolean;
};

export type AppearingTextProps = Props;
const {
	as: Tag = "p",
	class: className = "prose",
	text: rawText = "",
	group,
	dontShowTooltip,
	animatedOnView = true,
	animatedInitially,
	...other
} = Astro.props;

const textArr = rawText.split(/(\s)/);
const text = [];
for (const w of textArr) {
	if (/^\s$/.test(w)) text[text.length - 1] += w;
	else text.push(w);
}
const tooltipData = !dontShowTooltip && playAudioTooltip;

const commonProps = {
	"data-appearing-word": true,
	class: "transition-800 will-change-opacity",
};

let letterCount = 0;
---

<!-- TODO: FIX TYPE -->
<Tag
	{...other as any}
	{...tooltipData}
	class:list={[className]}
	data-appearing-group={group}
	data-text-audio-run={dontShowTooltip ? undefined : true}
>
	{
		text.map((w, i, arr) => {
			if (animatedOnView || animatedInitially) {
				if (arr[i - 1]) letterCount += arr[i - 1].length;
				return (
					<AnimatedText
						{...commonProps}
						as="span"
						word={w}
						offset={letterCount}
						animatedInitially={animatedInitially}
						animationSpeed={rawText.length}
					/>
				);
			}

			return <span {...commonProps}>{w}</span>;
		})
	}
</Tag>
