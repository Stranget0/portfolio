---
import type { TextTag } from "./types";
import type { Polymorphic } from "astro/types";

type Props<T extends TextTag = "p"> = Polymorphic<{ as: T }> & {
	text: string;
	class?: string;
	group?: number;
};

export type AppearingTextProps = Props;
const {
	as: Tag = "p",
	class: className = "prose",
	text: rawText="",
	group,
	...other
} = Astro.props;

const textArr = rawText.split(/(\s)/);
const text = [];
for (const w of textArr) {
	if (/^\s$/.test(w)) text[text.length - 1] += w;
	else text.push(w);
}
---

<!-- TODO: FIX TYPE -->
<Tag class:list={[className]} data-appearing-group={group} {...other as any}>
	{
		text.map((w) => {
			return <span  data-appearing-word class="transition-800 will-change-opacity">{w}</span>;
		})
	}
</Tag>

<script>
	import "./init"
</script>
