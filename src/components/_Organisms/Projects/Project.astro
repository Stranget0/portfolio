---
import SectionFloatingImages from "@components/SlidedSection/_SectionFloatingImages.astro";
import SectionFullscreenImages from "@components/SlidedSection/_SectionFullscreenImages.astro";
import SectionItem from "@components/SlidedSection/_SectionItem.astro";
import SectionItemDescription from "@components/SlidedSection/_SectionItemDescription.astro";
import SectionItemTitle from "@components/SlidedSection/_SectionItemTitle.astro";
import { type CollectionEntry, getEntryBySlug } from "astro:content";
import SectionFloatingImagesReferences from "@components/SlidedSection/_SectionFloatingImagesReferences.astro";
import SectionTechnologies from "@components/SlidedSection/_SectionTechnologies.astro";
import sortTechnologies from "@utils/sortTechnologies";
import SectionLinks from "@components/SlidedSection/_SectionLinks.astro";
import SectionHeading from "@components/SlidedSection/_SectionHeading.astro";
import SectionYear from "@components/SlidedSection/_SectionYear.astro";
import SectionTopFixed from "@components/SlidedSection/_SectionTopFixed.astro";
import AppearingText from "@components/AppearingText/AppearingText.astro";
import { forceFocusViewAttrObj } from "@plugins/forceFocusView/constants";
import { preloadImagesInContainer } from "@plugins/preloadImagesInContainer/serverUtils";

interface Props {
	frontmatter: CollectionEntry<"projects">;
}

const { frontmatter } = Astro.props;
const { data, render, slug, id } = frontmatter;
const {
	fullscreenImages,
	floatingImages,
	title,
	description,
	audioTextTimings,
	technologies: technologiesCollectionData,
	startYear,
	endYear,
	class: className = "bg-primary-50 color-var-primary-900",
	titleClass,
	github,
	website,
} = data;

const technologies =
	technologiesCollectionData &&
	(await Promise.all(
		technologiesCollectionData.map(({ slug }) =>
			getEntryBySlug("technologies", slug)
		)
	).then((arr) => sortTechnologies(arr)));

const isDarkBg = /(bleed|bg)-.+-(700|800|900|950)/.test(className);

const hasFullscreenImages = !!fullscreenImages?.length;
const hasFloatingImages = !!floatingImages?.length;

const isScrollRefFeature = true;

const hasTech = !!technologies?.length;

const { Content } = await render();
---

<SectionItem
	id={slug}
	class={className}
	data-scroll-feature-refs={isScrollRefFeature ? true : undefined}
	{...preloadImagesInContainer}
	{...forceFocusViewAttrObj}
>
	<AppearingText
		wordTimings={audioTextTimings || []}
		wordsReference={[]}
		audioPath=""
		id={id}
	>
		{title && <SectionItemTitle title={title} class={titleClass}/>}
		<SectionTopFixed>
			<SectionYear startYear={startYear} endYear={endYear} />
			<SectionLinks website={website} github={github} />
		</SectionTopFixed>
		<SectionItemDescription text={description}>
			<Content
				components={{
					h1: SectionHeading,
				}}
			/>
		</SectionItemDescription>
	</AppearingText>

	{
		hasFullscreenImages && (
			<SectionFullscreenImages
				images={fullscreenImages}
				floatingImages={floatingImages}
			/>
		)
	}
	{hasFloatingImages && <SectionFloatingImages images={floatingImages} />}
	{
		hasFloatingImages && (
			<SectionFloatingImagesReferences images={floatingImages} />
		)
	}
	{
		hasTech && (
			<SectionTechnologies
				entries={technologies}
				defaultColor={isDarkBg ? "black" : "white"}
				isTopSpacing={hasFullscreenImages}
			/>
		)
	}
</SectionItem>

<script>
	import importInView from "@utils/importInView/importInView";
	importInView(
		"scroll-reference",
		() => import("@components/_CustomElements/ScrollReference")
	);
</script>
