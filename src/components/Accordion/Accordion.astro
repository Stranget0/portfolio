---
import AccordionItem from "./AccordionItem.astro";
---

<ul
	class="accordion gap-6 max-w-6xl w-full md:(h-[calc(80vh+1rem)] min-h-xl) menu-opafocus justify-center md:flex-row"
	flex="~ col"
>
	<AccordionItem
		background="/src/assets/WorldWar3.jpg"
		chips={[{ label: "test", className: "bg-red" }]}
	>
		Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quo, dolores Lorem
		ipsum dolor sit, amet consectetur adipisicing elit. Quo, dolores Lorem ipsum
		dolor sit, amet consectetur adipisicing elit. Quo, dolores Lorem ipsum dolor
		sit, amet consectetur adipisicing elit. Quo, dolores
	</AccordionItem>
	<AccordionItem background="/src/assets/WorldWar3.jpg">
		eaque eum nulla natus itaque saepe vitae doloremque sequi aperiam est quis
	</AccordionItem>
	<AccordionItem background="/src/assets/WorldWar3.jpg">
		nesciunt sint debitis magni iste
	</AccordionItem>
</ul>

<script>
	function switchAttribute(
		from: HTMLElement | undefined | null,
		to: HTMLElement | undefined | null,
		attr: string,
		value: boolean
	) {
		from?.setAttribute(attr, `${!value}`);
		to?.setAttribute(attr, `${value}`);
	}
	function createAccordionOptionState(option?: HTMLElement | null) {
		return {
			_option: option,
			_trigger: option?.querySelector<HTMLElement>(".accordion-trigger"),
			_content: option?.querySelector<HTMLElement>(".accordion-content"),
			setOption(option: HTMLElement) {
				this._option?.classList.remove("expanded");
				option.classList.add("expanded");
				this._option = option;

				const trigger = option.querySelector<HTMLElement>(".accordion-trigger");
				switchAttribute(this._trigger, trigger, "aria-expanded", true);
				this._trigger = trigger;

				const content = option.querySelector<HTMLElement>(".accordion-content");
				switchAttribute(this._content, content, "aria-hidden", false);
				this._content = content;

				console.assert(trigger, "No trigger found for accordion");
				console.assert(content, "No content found for accordion");
			},
		};
	}

	const accordions = document.querySelectorAll(".accordion");
	for (const accordion of accordions) {
		const option = accordion.querySelector<HTMLElement>(".expanded");

		const activeAccordion = createAccordionOptionState(option);

		accordion.addEventListener("click", (e) => {
			const target = e.target as HTMLElement | null;
			const pressedAccordionOption =
				target?.closest<HTMLElement>(".accordion-panel");

			if (!pressedAccordionOption) return;

			activeAccordion.setOption(pressedAccordionOption);
		});
	}
</script>
