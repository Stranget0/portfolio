---
import Accordion from "../Accordion/Accordion.astro";
import AccordionItem, {
	AccordionItemProps,
} from "../Accordion/AccordionItem.astro";
import type { TextData } from "../AppearingText.astro";
import DynamicText from "../DynamicText.astro";
import { Image } from "@astrojs/image/components";

interface Project {
	name: string | TextData;
	description: string | TextData;
	accordions?: AccordionItemProps[];
	bleedClass?: string;
	fixedImages?: string[];
}

interface Props {
	title: string | TextData;
	sectionItems: Project[];
}

const { sectionItems, title } = Astro.props;

---

<section class="section bg-primary-50">
	<div class="text-primary-100 text-center pt-4">
		<DynamicText
			tag="h2"
			text={title}
			class="sticky z-12 top-0 text-subtitle-1 mb-4 mix-blend-difference mt-1px"
		/>
		{
			sectionItems.map(
				({
					name,
					description,
					accordions,
					fixedImages,
					bleedClass,
				}) => {
					return (
						<div
							class:list={[
								"relative p-16 pt-0 min-h-150vh",
								bleedClass,
							]}
							data-static-vh="150vh"
							data-static-vh-type="min"
						>
							<div
								class:list={[
									"sticky top-0 pt-font-4xl z-5 pb-4",
									bleedClass,
								]}
							>
								<DynamicText
									tag="h3"
									text={name}
									class="text-subtitle-2 mix-blend-difference"
								/>
							</div>
							{accordions && (
								<div
									class:list={[
										"relative flex flex-col items-center justify-center w-full isolate z-2 pb-2",
										bleedClass,
									]}
								>
									<Accordion>
										{accordions.map(({ background, chips }) => {
											return (
												<AccordionItem background={background} chips={chips} />
											);
										})}
									</Accordion>
								</div>
							)}
							<DynamicText
								text={description}
								class:list={[
									"sticky text-body mix-blend-difference mt-6 z-4 bottom-75vh",
									
								]}
							/>
							{fixedImages && (
								<div class="absolute inset-0 z-6 clip-full pointer-events-none">
									<div class="fixed inset-0 bottom-4 left-4 right-4 lg:(right-36 left-36) flex justify-center">
										<div class="w-full h-full max-w-250 flex flex-col gap-8 justify-end">
											{fixedImages.map((src, i) => {
												return (
													<div
														class:list={["rounded-2 overflow-hidden w-max w-fill",i%2===0 && "self-end"]}
													>
														<Image src={src} alt="" width={200} height={100} />
													</div>
												);
											})}
										</div>
									</div>
								</div>
							)}
						</div>
					);
				}
			)
		}
	</div>
</section>