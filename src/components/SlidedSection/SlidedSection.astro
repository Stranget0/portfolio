---
import Accordion from "../Accordion/Accordion.astro";
import AccordionItem, {
	AccordionItemProps,
} from "../Accordion/AccordionItem.astro";
import type { TextData } from "../AppearingText.astro";
import DynamicText from "../DynamicText.astro";
import ImagesCheckboard from "./ImagesCheckboard.astro";

interface Project {
	name: string | TextData;
	description: string | TextData;
	accordions?: AccordionItemProps[];
	bleedClass?: string;
	fixedImages?: ([string, string] | string)[];
}

interface Props {
	title: string | TextData;
	sectionItems: Project[];
}

const { sectionItems, title } = Astro.props;
---

<section class="section bg-primary-50">
	<div class="text-primary-100 text-center pt-4">
		<DynamicText
			tag="h2"
			text={title}
			class="sticky z-12 top-0 text-subtitle-1 mb-4 mix-blend-difference mt-1px"
		/>
		{
			sectionItems.map(
				({ name, description, accordions, fixedImages, bleedClass }) => {
					return (
						<scroll-reference
							class:list={["relative p-16 pt-0 min-h-150vh w-full block", bleedClass]}
							data-static-vh="150vh"
							data-static-vh-type="min"
						>
							<div
								class:list={["sticky top-0 pt-font-4xl z-5 pb-4", bleedClass]}
							>
								<DynamicText
									tag="h3"
									text={name}
									class="text-subtitle-2 mix-blend-difference"
								/>
							</div>
							{accordions && (
								<div
									class:list={[
										"relative flex flex-col items-center justify-center w-full isolate z-2 pb-2",
										bleedClass,
									]}
								>
									<Accordion>
										{accordions.map(({ background, chips }) => {
											return (
												<AccordionItem background={background} chips={chips} />
											);
										})}
									</Accordion>
								</div>
							)}
							<DynamicText
								text={description}
								class:list={[
									"sticky text-body mix-blend-difference mt-6 z-4 bottom-55vh",
								]}
							/>
							{fixedImages && (
								<div class="absolute inset-0 z-6 clip-full pointer-events-none">
									<div class="fixed top-35% bottom-4 left-4 right-4 lg:(right-36 left-36 bottom-8) flex justify-center">
										<ImagesCheckboard
											images={[...fixedImages].reverse()}
											class="justify-end"
											imageProps={{ "data-scroll-target": true }}
										/>
									</div>
								</div>
									<div class="absolute inset-0 top-50% flex flex-col-reverse invisible">
										{fixedImages.map(()=><div class='w-20 bg-red flex-grow-1' data-scroll-target-ref/>)}
									</div>
							)}
						</div>
					);
				}
			)
		}
	</div>
</section>

<script>
	import { scroll, animate, spring, ScrollOptions } from "motion";

	
	class ScrollReference extends HTMLElement {
		constructor() {
			super();
		}
		clean: null | (() => void) = null;
		connectedCallback() {
			if (!this.isConnected) return;

			
			const targets = this.querySelectorAll<HTMLElement>("[data-scroll-target]");
				const targetsRef = this.querySelectorAll<HTMLElement>("[data-scroll-target-ref]");

			const cleanArr:(()=>void)[]= []
			for(let i=0; i<targets.length; i++) {
				const target = targets[i];
				const targetRef = targetsRef[i]
				const options:ScrollOptions= { target: targetRef, offset: [`start end`, `start 0.5`] };
				const clean = scroll(animate(target, {scale:[0,1,0], opacity:[0,1,0]},{easing:"ease-in-out"}),options)
				cleanArr.push(clean)
			}
			
			this.clean = ()=>{while(cleanArr.length) cleanArr.pop()?.();}
		}
		disconnectedCallback() {
			this.clean?.();
			this.clean = null;
		}
	}

	customElements.define("scroll-reference", ScrollReference);

</script>