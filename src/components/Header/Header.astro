---
import type { Tabs } from "@/types";
import { scrollVelocityTransform } from "@plugins/scrollVelocityTransform/serverUtils";
import DialogButton from "../Dialog/DialogButton.astro";
import Dialog from "../Dialog/Dialog.astro";
import TabsList from "./TabsList.astro";
import LocalesList from "./LocalesList.astro";
import { useTranslations } from "@/i18n/utils";

interface Props {
	tabs: Tabs;
}
export type HeaderProps = Props;

const dialogIds = { tabs: "tabs-dialog", locales: "locales-dialog" };
const t = useTranslations(Astro.url);

const { tabs } = Astro.props;
---

<header
	class="text-label -translate-y-50 color-white text-right z-1000 fixed mix-blend-difference top-4 right-4 motion-safe:transition-transform"
>
	<nav class="flex flex-col items-end gap-2" {...scrollVelocityTransform(2)}>
		<DialogButton
			dialogId={dialogIds.tabs}
			icon="burger"
			label={t("header.menu")}
		/>
		<DialogButton
			dialogId={dialogIds.locales}
			icon="locales"
			label={t("header.language")}
		/>
	</nav>
</header>

<Dialog dialogId={dialogIds.tabs}>
	<TabsList tabs={tabs} />
</Dialog>

<Dialog dialogId={dialogIds.locales} transition:persist>
	<LocalesList tabs={tabs} />
</Dialog>

<script>
	import runOnEachPage from "@utils/runOnEachPage";
	import { scroll } from "motion";

	runOnEachPage((clean) => {
		const hiddenClass = "-translate-y-50";
		const header = document.querySelector<HTMLElement>("header");
		if (!header) return;
		header.classList.remove(hiddenClass);
		const timeoutId = setTimeout(() => {
			clean(
				scroll(({ y }) => {
					if (y.velocity > 0) header.classList.add(hiddenClass);
					else if (y.velocity < 0) header.classList.remove(hiddenClass);
				}),
			);
		}, 5000);

		clean(() => clearTimeout(timeoutId));
	});
</script>

<style lang="scss" is:global>
	.animated-underline {
		@apply relative before:(pseudo-full top-auto w-full h-0.1em scale-x-0) hover:before:scale-x-100 focus-visible:before:scale-x-1 motion-safe:before:transition-transform;

		&::before {
			background-color: var(--underline-color, currentColor);
			transform-origin: var(--underline-origin, center bottom);
		}
	}
</style>
