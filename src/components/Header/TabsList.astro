---
import ListTitle from "./ListTitle.astro";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import tabFilters from "@utils/tabFilters";
import type { Tabs } from "@/types";
interface Props {
	tabs: Tabs;
}

const { tabs } = Astro.props;
const tabsEntries = Object.entries(tabs);

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<ListTitle>{t("header.menu")}</ListTitle>
<ul class="absolute-center flex-col-center gap-6">
	{
		tabsEntries.map(async ([tabKey, { href, label }]) => {
			const labelText = label(Astro.url);
			const tabFilter = tabFilters[tabKey];

			if (tabFilter && !(await tabFilter(lang))) return;

			const isElementLink = href?.startsWith("#");
			const resultHref = href && (isElementLink ? href : `/${lang}${href}`);

			return (
				<li class="motion-safe:transition-transform">
					<a
						is="nav-tab"
						class="animated-underline animated-underline-right font-light"
						href={resultHref}
						data-tab-active-class="before:important:scale-x-100"
						title={labelText}
					>
						{labelText}
					</a>
				</li>
			);
		})
	}
</ul>

<script>
	const observer = new IntersectionObserver(
		(targets) => {
			for (const { isIntersecting, target } of targets) {
				if (isIntersecting) Tab.tabs[target.id].setActive();
			}
		},
		{
			threshold: 0,
			root: null,
			rootMargin: `${-window.innerHeight / 2.1}px 0px ${
				-window.innerHeight / 2.1
			}px 0px`,
		},
	);

	export default class Tab extends HTMLAnchorElement {
		static activeTab: Tab | null = null;
		static tabs: { [id in string]: Tab } = {};
		idRef = "";

		connectedCallback() {
			if (!this.isConnected) return;
			this.idRef = /#(.+)$/i.exec(this.href)?.[1] || "";
			const pointedElement =
				this.idRef && document.querySelector(`#${this.idRef}`);

			observer.observe(pointedElement as HTMLElement);
			Tab.tabs[this.idRef] = this;
		}
		disconnectedCallback() {
			delete Tab.tabs[this.idRef];
		}

		setActive() {
			Tab.activeTab?.classList.remove(getActiveClass(Tab.activeTab));
			Tab.activeTab = this;
			this.classList.add(getActiveClass(Tab.activeTab));
		}
	}

	customElements.define("nav-tab", Tab, { extends: "a" });
	function getActiveClass(tab: Tab): string {
		return tab.dataset["tabActiveClass"] || "";
	}
</script>
