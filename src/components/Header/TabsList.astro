---
import ListTitle from "./ListTitle.astro";
import { useTranslations } from "@/i18n/utils";
import type { Tabs } from "@/types";
interface Props {
	tabs: Tabs;
}

const { tabs } = Astro.props;
const tabsEntries = Object.entries(tabs);

const t = useTranslations(Astro.url);
---

<ListTitle>{t("header.menu")}</ListTitle>
<ul class="absolute-center flex-col-center gap-6">
	{
		tabsEntries.map(async ([_, { id, label, filter }]) => {
			const labelText = label(Astro.url);
			return (
				(!filter || (await filter(Astro.url))) && (
					<li class="motion-safe:transition-transform">
						<a
							is="nav-tab"
							class="animated-underline animated-underline-right font-light"
							href={`#${id}`}
							data-tab-active-class="before:important:scale-x-100"
							title={labelText}
						>
							{labelText}
						</a>
					</li>
				)
			);
		})
	}
</ul>

<script>
	import getFoxController from "../ThreeScene/foxApi";

	const observer = new IntersectionObserver(
		(targets) => {
			for (const { isIntersecting, target } of targets) {
				if (isIntersecting) Tab.tabs[target.id].setActive();
			}
		},
		{
			threshold: 0,
			root: null,
			rootMargin: `${-window.innerHeight / 2.1}px 0px ${
				-window.innerHeight / 2.1
			}px 0px`,
		},
	);

	export default class Tab extends HTMLAnchorElement {
		static activeTab: Tab | null = null;
		static tabs: { [id in string]: Tab } = {};
		idRef = "";

		connectedCallback() {
			if (!this.isConnected) return;
			this.idRef = /#(.+)$/i.exec(this.href)?.[1] || "";
			const pointedElement =
				this.idRef && document.querySelector(`#${this.idRef}`);
			if (!pointedElement) {
				console.error(`No element with id ${this.idRef} found`, this);
				return;
			}
			observer.observe(pointedElement as HTMLElement);
			Tab.tabs[this.idRef] = this;
		}
		disconnectedCallback() {
			delete Tab.tabs[this.idRef];
		}

		setActive() {
			Tab.activeTab?.classList.remove(getActiveClass(Tab.activeTab));
			Tab.activeTab = this;
			this.classList.add(getActiveClass(Tab.activeTab));

			// Update fox position
			getFoxController()
				?.then((controller) => controller.updateWaypointsPositions())
				.catch(() => {});
		}
	}

	customElements.define("nav-tab", Tab, { extends: "a" });
	function getActiveClass(tab: Tab): string {
		return tab.dataset["tabActiveClass"] || "";
	}
</script>
