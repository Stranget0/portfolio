---
import Accordion from "./Accordion/Accordion.astro";
import AccordionItem, {
	AccordionItemProps,
} from "./Accordion/AccordionItem.astro";
import type { TextData } from "./AppearingText.astro";
import DynamicText from "./DynamicText.astro";

interface Project {
	name: string | TextData;
	description: string | TextData;
	accordions?: AccordionItemProps[];
	bleedClass?: string;
}

interface Props {
	title: string | TextData;
	projects: Project[];
}

const { projects, title } = Astro.props;
---

<div class="text-primary-100 text-center pt-4">
	<DynamicText
		tag="h2"
		text={title}
		class="sticky z-12 top-0 text-subtitle-1 mb-4 mix-blend-difference"
	/>
	{
		projects.map(({ name, description, accordions, bleedClass: bleedClass }, i) => {
			const nextBleed = projects[i + 1]?.bleedClass;
			return (
				<div
					class:list={["relative p-16 min-h-150vh -mt-1px", bleedClass]}
					data-static-vh="150vh"
					data-static-vh-type="min"
				>
					{nextBleed && (
						<div
							class:list={[
								"mask",
								"absolute bottom-0 w-full h-30vh",
								nextBleed,
							]}
							data-static-vh="30vh"
						/>
					)}

					<div class:list={["sticky top-0 pt-font-4xl z-3 pb-4", bleedClass]}>
						<DynamicText
							tag="h3"
							text={name}
							class="text-subtitle-2 mix-blend-difference"
						/>
					</div>
					<div
						class:list={[
							"relative flex flex-col items-center justify-center w-full isolate z-2 pb-2",
							bleedClass,
						]}
					>
						{accordions && <Accordion>
							{accordions.map(({ background, chips }) => {
								return <AccordionItem background={background} chips={chips} />;
							})}
						</Accordion>
					}
					</div>
					<DynamicText
						text={description}
						class="sticky bottom-25vh text-body mix-blend-difference mt-6"
					/>
				</div>
			);
		})
	}
</div>

<style lang="scss">
	.mask {
		display: none;
		@media (height > theme("breakpoints.md")) {
			display: block;
		}
	}
</style>
